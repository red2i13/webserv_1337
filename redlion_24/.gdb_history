n
b handle_post(HttpRequest&, HttpResponse&, Server_block&) 
c
n
start
c
n
make
start
c
n
c
c
start
c
n
make
make
c
make
start
c
b handle_client_io(int) 
c
start
c
n
exit
b handle_client_io(int) 
c
start
c
n
exit
b handle_client_io(int) 
c
start
c
n
p buffer
n
n
n
exit
start
b handle_client_io(int) 
c
n
p end_pos
n
start
c
n
p len(buffer)
n
p buffer
make
start
c
n
n
p end_pos
n
n
p end_pos
n
exit
b handle_client_io(int) 
c
start
c
n
n
p conn.buffer
make
start
c
n
exit
start
b handle_client_io(int) 
c
n
start
c
n
start
c
n
p res
n
make
exit
start
b handle_client_io(int) 
c
n
mkae
make
start
c
c
exit
start
b handle_client_io(int) 
c
n
b socket_main_loop() 
n
n
n
exit
c
start
c
exit
start
c
make
c
start
b handle_client_io(int) 
c
n
n
n
p bytes
n
n
c
n
p buffer
make
c
n
start
v
c
n
v
c
n
exit
b handle_client_io(int) 
c
start
c
n
c
exit
c
c
c
c
c
c
make
c
c
c
exit
start
b handle_client_io(int) 
c
b 166
c
n
p conn.requests.front()
p conn.requests.size()
p conn
n
start
c
c
n
MAKE
mkae
make
c
n
make
c
c
start
c
n
exit
b handle_client_io(int) 
c
start
c
n
p bytes
n
exit
start
 b socket_main_loop() 
c
n
n
start
start
c
n
n
p events[it_fd].events
p events[it_fd].events & (EPOLLHUP)
p events[it_fd].events & (EPOLLOUT)
p events[it_fd].events & (EPOLLIN)
exit
exit
b handle_client_io(int) 
c
start
c
c
exit
start
b handle_client_io(int) 
c
exit
b handle_client_io(int) 
c
start
c
start
b handle_client_io(int) 
c
start
b handle_client_io(int) 
c
n
n
mkae
exit
b check_connection_timeout() 
c
start
c
n
c
n
exit
b check_connection_timeout() 
c
start
c
n
c
n
n
c
n
p it->second
n
exit
